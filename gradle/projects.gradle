allprojects {

    apply plugin: 'java'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply from: "$rootDir/gradle/artifacts.gradle"
    apply from: "$rootDir/gradle/jacoco.gradle"
    apply from: "$rootDir/gradle/pmd.gradle"
    apply from: "$rootDir/gradle/checkstyle.gradle"
    apply from: "$rootDir/gradle/findbugs.gradle"
    apply from: "$rootDir/gradle/publishing.gradle"

    configurations {
        warlibs
    }

    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url artifactoryURL
            credentials {
                username = artifactoryUser
                password = artifactoryPassword
            }
        }
    }

    dependencies {
        errorprone 'com.google.errorprone:error_prone_core:2.0.21'

        compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.0'
        compile group: 'net.sf.flexjson', name: 'flexjson', version: '3.3'
        compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.3'

        testCompile "junit:junit:4.12"
        testCompile ('org.assertj:assertj-core:3.8.0')
        warLibs 'org.ajoberstar:gradle-git:1.4.2'
        warLibs 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.13'
        warLibs 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
        warLibs group: 'net.sf.flexjson', name: 'flexjson', version: '3.3'
        warLibs group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.3'

    }

    apply plugin: 'war'

    war {
        //from "$rootDir/src/main/webapp" // adds a file-set to the root of the archive
        webInf { from "$rootDir//main/java" } // adds a file-set to the WEB-INF dir.
        //classpath fileTree('additionalLibs') // adds a file-set to the WEB-INF/lib dir.
        classpath configurations.warLibs // adds a configuration to the WEB-INF/lib dir.
        //webXml = file('WebContent/WEB-INF/web.xml') // copies a file to WEB-INF/web.xml
    }

    tasks.withType(JavaCompile) {
        // Disabled '-XepAllDisabledChecksAsWarnings', '-Xep:Var:OFF', '-Werror'
        options.compilerArgs += ['-Xlint:-options']
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    tasks.withType (Test) {
        maxParallelForks = 2
        testLogging {
            showStandardStreams = true
            events 'started', 'passed', 'failed'
        }
        jacoco {
            append = false
            destinationFile = file("$buildDir/jacoco/${name}.exec")
            classDumpDir = file("$buildDir/jacoco/${name}_ClassDump")
        }
    }

    test {
        description 'Used for running unit tests.'
        exclude '**/**MockTest.class'
        exclude '**/**IntegTest.class'
    }

    task mockTest(type: Test) {
        description 'Used for running mock tests.'
        include '**/**MockTest.class'
    }

    task integTest(type: Test) {
        description 'Used for running integ tests.'
        include '**/**IntegTest.class'
    }

    build.finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}
